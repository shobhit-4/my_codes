class Solution {
    public void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
 
    
    int L[] = new int[n1];
    int R[] = new int[n2];
 
    
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
 
    
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
 
    
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
public void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
    public int solution(int[] A) {
        // write your code in Java SE 8
        int n=A.length;
        int B[] = new int[n];
        int ans=0;
        int i,j;
        for (i=0,j=0;i<n;i++){
            if(A[i]>=1)
                B[j++]=A[i];
            }
        if (j==0)
            return 1;
        else {
            mergeSort(B, 0, n-1);
        
       /* for(i=0;i<j;i++)
            System.out.println(B[i] + " ");
            */
        for(i=0;i<j;i++){
			if(i==j-1){
				ans = B[i]+1;
				break;
				}
			else{
				if(B[i+1]-B[i] > 1){
					ans = B[i]+1;
					break;
					}
            }
		}
        return ans;
        }
    }
}